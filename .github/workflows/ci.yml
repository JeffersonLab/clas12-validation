name: Validation

on:
  workflow_dispatch:
    inputs:
      actor:
        required: true
        type: string
      source:
        required: true
        type: string
      title:
        required: true
        type: string
      num_events:
        required: false
        type: string
      source_url:
        required: false
        type: string
      git_coatjava:
        required: false
        type: string
      git_clas12Tags:
        required: false
        type: string
      git_clas12-config:
        required: false
        type: string
  pull_request:
  push:
    branches: [ main ]
    tags: [ '*' ]

run-name: "[${{ inputs.actor || github.actor }} :: ${{ inputs.source || github.event.repository.name }}] ${{ inputs.title || github.event.pull_request.title || github.event.head_commit.message }}"

concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  # default dependency forks and branches
  git_coatjava: >-
    {
      "fork": "JeffersonLab/coatjava",
      "branch": "development"
    }
  git_clas12Tags: >-
    {
      "fork": "gemc/clas12Tags",
      "branch": "main"
    }
  git_clas12-config: >-
    {
      "fork": "JeffersonLab/clas12-config",
      "branch": "main",
      "tag_config_coatjava": "latest",
      "tag_config_gemc": "latest"
    }
  # default number of events
  num_events: 10

jobs:

  # dependency and triggerer info
  #############################################################################
  dependency_info:
    name: Dependency info
    runs-on: ubuntu-latest
    outputs:
      fork_coatjava: ${{ steps.info.outputs.fork_coatjava }}
      branch_coatjava: ${{ steps.info.outputs.branch_coatjava }}
      fork_clas12Tags: ${{ steps.info.outputs.fork_clas12Tags }}
      branch_clas12Tags: ${{ steps.info.outputs.branch_clas12Tags }}
      fork_clas12-config: ${{ steps.info.outputs.fork_clas12-config }}
      branch_clas12-config: ${{ steps.info.outputs.branch_clas12-config }}
      tag_config_coatjava: ${{ steps.info.outputs.tag_config_coatjava }}
      tag_config_gemc: ${{ steps.info.outputs.tag_config_gemc }}
    steps:
      - name: get dependency info
        id: info
        run: |
          echo fork_coatjava=$(        echo '${{ inputs.git_coatjava || env.git_coatjava }}'           | jq -r '.fork'                ) >> $GITHUB_OUTPUT
          echo branch_coatjava=$(      echo '${{ inputs.git_coatjava || env.git_coatjava }}'           | jq -r '.branch'              ) >> $GITHUB_OUTPUT
          echo fork_clas12Tags=$(      echo '${{ inputs.git_clas12Tags || env.git_clas12Tags }}'       | jq -r '.fork'                ) >> $GITHUB_OUTPUT
          echo branch_clas12Tags=$(    echo '${{ inputs.git_clas12Tags || env.git_clas12Tags }}'       | jq -r '.branch'              ) >> $GITHUB_OUTPUT
          echo fork_clas12-config=$(   echo '${{ inputs.git_clas12-config || env.git_clas12-config }}' | jq -r '.fork'                ) >> $GITHUB_OUTPUT
          echo branch_clas12-config=$( echo '${{ inputs.git_clas12-config || env.git_clas12-config }}' | jq -r '.branch'              ) >> $GITHUB_OUTPUT
          echo tag_config_coatjava=$(  echo '${{ inputs.git_clas12-config || env.git_clas12-config }}' | jq -r '.tag_config_coatjava' ) >> $GITHUB_OUTPUT
          echo tag_config_gemc=$(      echo '${{ inputs.git_clas12-config || env.git_clas12-config }}' | jq -r '.tag_config_gemc'     ) >> $GITHUB_OUTPUT
      - name: dispatch summary
        run: |
          echo '| | | |' >> $GITHUB_STEP_SUMMARY
          echo '| --- | --- | --- |' >> $GITHUB_STEP_SUMMARY
          echo '| **Pull Request** | <${{ inputs.source_url || github.event.pull_request.html_url }}> | ${{ inputs.title || github.event.pull_request.title }} |' >> $GITHUB_STEP_SUMMARY
          echo '| **`coatjava` Fork and Branch** | `${{ steps.info.outputs.fork_coatjava }}` | [`${{ steps.info.outputs.branch_coatjava }}`](https://github.com/${{ steps.info.outputs.fork_coatjava }}/tree/${{ steps.info.outputs.branch_coatjava }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| **`clas12Tags` Fork and Branch** | `${{ steps.info.outputs.fork_clas12Tags }}` | [`${{ steps.info.outputs.branch_clas12Tags }}`](https://github.com/${{ steps.info.outputs.fork_clas12Tags }}/tree/${{ steps.info.outputs.branch_clas12Tags }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| **`clas12-config` Fork and Branch** | `${{ steps.info.outputs.fork_clas12-config }}` | [`${{ steps.info.outputs.branch_clas12-config }}`](https://github.com/${{ steps.info.outputs.fork_clas12-config }}/tree/${{ steps.info.outputs.branch_clas12-config }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| | | |' >> $GITHUB_STEP_SUMMARY

  # build
  #############################################################################

  build_coatjava:
    name: Build coatjava
    needs:
      - dependency_info
    runs-on: ubuntu-latest
    steps:
      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
      - name: clone
        run: git clone https://github.com/${{ needs.dependency_info.outputs.fork_coatjava }}.git --branch ${{ needs.dependency_info.outputs.branch_coatjava }}
      - name: build
        working-directory: coatjava
        run: ./build-coatjava.sh
      - name: tree
        run: tree
      - name: tar
        run: tar czvf coatjava{.tar.gz,}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: ./*.tar.gz

  build_gemc:
    name: Build GEMC
    needs:
      - dependency_info
    runs-on: ubuntu-latest
    container: jeffersonlab/gemc:4.4.2-5.1-5.2-5.3-fedora36-cvmfs ##### FIXME: need `latest` tag
    steps:
      - name: clone
        run: git clone https://github.com/${{ needs.dependency_info.outputs.fork_clas12Tags }}.git --branch ${{ needs.dependency_info.outputs.branch_clas12Tags }}
      - name: build
        working-directory: clas12Tags/source
        run: |
          source /app/localSetup.sh
          scons -j2 OPT=1
      - name: version info
        working-directory: clas12Tags/source
        run: |
          source /app/localSetup.sh
          module switch gemc/5.3 # for dependency files ##### FIXME: switch to gemc/dev and use ubuntu + cvmfs action
          echo "### GEMC Build Information:"
          ./gemc -USE_GUI=0
      - name: tar
        run: tar czvf clas12Tags{.tar.gz,}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: ./*.tar.gz

  # clas12-config configuration
  #############################################################################

  config_files:
    name: Configuration files
    needs:
      - dependency_info
    runs-on: ubuntu-latest
    outputs:
      num_events: ${{ steps.num_events.outputs.num_events }}
      tag_config_coatjava: ${{ steps.version.outputs.tag_config_coatjava }}
      tag_config_gemc: ${{ steps.version.outputs.tag_config_gemc }}
      evgen_files_json: ${{ steps.json_matrix.outputs.evgen_files_json }}
      config_files_json: ${{ steps.json_matrix.outputs.config_files_json }}
      config_matrix: ${{ steps.json_matrix.outputs.config_matrix }}
    steps:
      - uses: actions/checkout@v3
      - name: clone
        run: git clone https://github.com/${{ needs.dependency_info.outputs.fork_clas12-config }}.git --branch ${{ needs.dependency_info.outputs.branch_clas12-config }}
      - name: set number of events
        id: num_events
        run: |
          num_events=${{ inputs.num_events || env.num_events }}
          [ $num_events -eq 0 ] && num_events=${{ env.num_events }}
          echo num_events=$num_events >> $GITHUB_OUTPUT
          echo "### Number of Events:" >> $GITHUB_STEP_SUMMARY
          echo "$num_events" >> $GITHUB_STEP_SUMMARY
      - name: test clas12-config utils
        run: |
          cd clas12-config
          util/latest.rb coatjava
          util/latest.rb gemc
      - name: get version info
        id: version
        working-directory: clas12-config
        run: |
          tag_config_coatjava=${{ needs.dependency_info.outputs.tag_config_coatjava }}
          tag_config_gemc=${{ needs.dependency_info.outputs.tag_config_gemc }}
          # get the 'latest' version number, if we asked for 'latest'
          [ "${{ needs.dependency_info.outputs.tag_config_coatjava }}" = "latest" ] &&  tag_config_coatjava=$(util/latest.rb coatjava)
          [ "${{ needs.dependency_info.outputs.tag_config_gemc }}" = "latest" ]     && tag_config_gemc=$(util/latest.rb gemc)
          # job summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Versions:" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration File Set | Version |"      >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"                             >> $GITHUB_STEP_SUMMARY
          echo "| \`coatjava\` | ${tag_config_coatjava} |" >> $GITHUB_STEP_SUMMARY
          echo "| \`gemc\` | ${tag_config_gemc} |"         >> $GITHUB_STEP_SUMMARY
          # output vars
          echo tag_config_coatjava=$tag_config_coatjava >> $GITHUB_OUTPUT
          echo tag_config_gemc=$tag_config_gemc         >> $GITHUB_OUTPUT
      - name: read matrix from json files
        id: json_matrix
        run: |
          # matrices
          echo evgen_files_json=$(jq -c . config/evgen_ci.json) >> $GITHUB_OUTPUT
          echo config_files_json=$(jq -c . config/config_ci.json) >> $GITHUB_OUTPUT
          echo config_matrix=$(jq -sc add <(echo '$evgen_files_json') <(echo '$config_files_json')) >> $GITHUB_OUTPUT
          # summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration Job Matrix:" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo '$config_matrix' | jq | xargs -0 -I{} echo {} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: tar
        run: tar czvf clas12-config{.tar.gz,}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: ./*.tar.gz

  # event generation
  #############################################################################
  event_generation:
    name: Event generation
    needs:
      - build_coatjava
      - config_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.config_files.outputs.evgen_files_json) }}
    steps:
      - uses: actions/checkout@v3
      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
      - name: setup groovy
        uses: wtfjoke/setup-groovy@v1
        with:
          groovy-version: 4.x
      - uses: actions/download-artifact@v3
        with:
          name: build
      - name: untar build
        run: ls *.tar.gz | xargs -I{} tar xzvf {}
      - name: check if this configuration is known
        run: jq -re '.${{ matrix.evgen }}' config/evgen_opts.json
      - name: event generation
        run: |
          coatjava/coatjava/bin/run-groovy \
            coatjava/validation/advanced-tests/src/eb/scripts/gen.groovy \
            $(jq -r '.${{ matrix.evgen }}' config/evgen_opts.json) \
            -n ${{ needs.config_files.outputs.num_events }}
      - name: rename artifact
        run: |
          ls -t *.txt
          mv -v $(ls -t *.txt | head -n1) evgen.${{ matrix.evgen }}.dat
      - uses: actions/upload-artifact@v3
        with:
          name: evgen
          retention-days: 1
          path: evgen.${{ matrix.evgen }}.dat

  # simulation, reconstruction, and analysis: combined to one step to avoid large artifact I/O overhead
  #############################################################################
  fulltest:
    name: Full test
    needs:
      - event_generation
      - build_gemc
      - config_files
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.config_files.outputs.config_matrix) }}
    steps:
      - uses: actions/checkout@v3
      - name: setup groovy
        uses: wtfjoke/setup-groovy@v1
        with:
          groovy-version: 4.x
      - uses: actions/download-artifact@v3
        with:
          name: evgen
      - uses: actions/download-artifact@v3
        with:
          name: build
      - name: tree
        run: ls -lhR
      - name: untar build
        run: ls *.tar.gz | xargs -I{} tar xzvf {}
      - name: file names
        id: files
        run: |
          echo evgenFile=evgen.${{ matrix.evgen }}.dat >> $GITHUB_OUTPUT
          echo simFile=sim.${{ matrix.evgen }}.${{ matrix.config }}.hipo >> $GITHUB_OUTPUT
          echo recFile=rec.${{ matrix.evgen }}.${{ matrix.config }}.hipo >> $GITHUB_OUTPUT
          echo anaFile=ana.${{ matrix.evgen }}.${{ matrix.config }}.txt  >> $GITHUB_OUTPUT
          echo gemcConfigFile=clas12-config/gemc/${{ needs.config_files.outputs.tag_config_gemc }}/${{ matrix.config }}.gcard >> $GITHUB_OUTPUT
          echo coatjavaConfigFile=clas12-config/coatjava/${{ needs.config_files.outputs.tag_config_coatjava }}/${{ matrix.config }}.yaml >> $GITHUB_OUTPUT
      - name: config files exist
        run: |
          ls ${{ steps.files.outputs.gemcConfigFile }}
          ls ${{ steps.files.outputs.coatjavaConfigFile }}
      - name: simulation
        uses: docker://jeffersonlab/gemc:4.4.2-5.1-5.2-5.3-fedora36-cvmfs ##### FIXME: need `latest` tag
        with:
          entrypoint: bin/ci_sim.sh ##### FIXME (in the script): switch to gemc/dev and use ubuntu + cvmfs action
          args: ${{ steps.files.outputs.gemcConfigFile }} ${{ steps.files.outputs.evgenFile }} ${{ steps.files.outputs.simFile }}
      - name: check if output exists
        run: ls ${{ steps.files.outputs.simFile }}
      - name: reconstruction
        run: |
          coatjava/coatjava/bin/recon-util \
            -y ${{ steps.files.outputs.coatjavaConfigFile }} \
            -i ${{ steps.files.outputs.simFile }} \
            -o ${{ steps.files.outputs.recFile }}
      - name: check if output exists
        run: ls ${{ steps.files.outputs.recFile }}
      - name: analysis
        run: coatjava/coatjava/bin/run-groovy bin/multiplicity.groovy ${{ steps.files.outputs.recFile }} ${{ steps.files.outputs.anaFile }}
      - uses: actions/upload-artifact@v3
        with:
          name: sim
          retention-days: 3
          path: sim.${{ matrix.evgen }}.${{ matrix.config }}.hipo
      - uses: actions/upload-artifact@v3
        with:
          name: rec
          retention-days: 3
          path: rec.${{ matrix.evgen }}.${{ matrix.config }}.hipo
      - uses: actions/upload-artifact@v3
        with:
          name: ana
          retention-days: 3
          path: ana.${{ matrix.evgen }}.${{ matrix.config }}.txt

  # finalize
  #############################################################################
  final:
    name: Final
    needs:
      - fulltest
      - config_files
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: check for failures
        if: ${{ contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled') || contains(needs.*.result, 'skipped') }}
        run: exit 1
      - uses: actions/download-artifact@v3
        with:
          name: ana
      - name: read multiplicity
        run: |
          echo "# Multiplicity Report" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          echo "   config:  PID (multiplicity) ...    # sorted multiplicity for each PID" >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
          for evgen in $(echo '${{ needs.config_files.outputs.config_matrix }}' | jq -r '.evgen[]') ; do
            echo "### \`$evgen\`" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            for config in $(echo '${{ needs.config_files.outputs.config_matrix }}' | jq -r '.config[]') ; do
              printf "%25s:  %s" $config "$(tail -n1 ana.${evgen}.${config}.txt)" | xargs -0 -I{} echo {} >> $GITHUB_STEP_SUMMARY
            done
            echo '```' >> $GITHUB_STEP_SUMMARY
          done
