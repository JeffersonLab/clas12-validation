name: Validation

on:
  workflow_call:
    inputs:
      # override default number of events, both ${{ env.num_events_fast }} and ${{ env.num_events_full }}
      num_events:
        required: false
        type: string
      # override default event generation types to run, the ${{ env.matrix_evgen }} JSON list
      matrix_evgen:
        required: false
        type: string
      # override default config files to run, the ${{ env.matrix_config }} JSON list
      matrix_config:
        required: false
        type: string
      # override default versions of config files, the full ${{ env.config_file_versions }} JSON
      config_file_versions:
        required: false
        type: string
      # override default forks and branches, ${{ env.git_upstream }} JSON elements (you do not have to specify all of them, just the ones you want to override)
      git_upstream:
        required: false
        type: string
  pull_request:
  push:
    branches: [ main ]
    tags: [ '*' ]
  schedule:
    - cron: '33 8 * * *'

### keep concurrency class disabled, so that callers can control it
# concurrency:
#   group: ${{ github.head_ref || github.run_id }}
#   cancel-in-progress: true

defaults:
  run:
    shell: bash

env:
  # default number of events, for "fast" and "full" tests
  num_events_fast: 10
  num_events_full: 1000
  # default event generation types to run; see below for all available types and their options
  matrix_evgen: >-
    [
      "e_K",
      "e_KC",
      "e_n",
      "e_g",
      "e_nC",
      "eFT_K",
      "e_gFT"
    ]
  # default config files to run
  matrix_config: >-
    [
      "clas12-default",
      "rga_spring2018",
      "rga_fall2018",
      "rgk_fall2018_FTOn",
      "rgb_fall2019",
      "rgc_summer2022_FTOn"
    ]
  # default forks and branches
  git_upstream: >-
    {
      "coatjava":          { "fork": "JeffersonLab/coatjava",          "branch": "development" },
      "clas12Tags":        { "fork": "gemc/clas12Tags",                "branch": "main"        },
      "clas12-config":     { "fork": "JeffersonLab/clas12-config",     "branch": "main"        },
      "clas12-validation": { "fork": "JeffersonLab/clas12-validation", "branch": "main"        }
    }
  # default versions of config files
  config_file_versions: >-
    {
      "coatjava": "latest",
      "gemc":     "latest"
    }
  # available event generation types, together with their options
  evgen_opts: >-
    {
      "e_p":    "-pid 2212",
      "e_K":    "-pid 321",
      "e_pi":   "-pid 211",
      "e_g":    "-pid 22",
      "e_n":    "-pid 2112",
      "e_gFT":  "-pid 22 -ft",
      "e_pC":   "-pid 2212 -cd",
      "e_KC":   "-pid 321 -cd",
      "e_piC":  "-pid 211 -cd",
      "e_nC":   "-pid 2112 -cd",
      "e_dC":   "-pid 45 -cd",
      "eFT_pi": "-pid -211 -ft",
      "eFT_p":  "-pid -2212 -ft",
      "eFT_K":  "-pid -321 -ft"
    }

jobs:

  # context dump
  #############################################################################
  context:
    name: GitHub context
    runs-on: ubuntu-latest
    steps:
      - name: dump context
        run: |
          echo $GITHUB_CONTEXT > context.json
          jq . context.json
    env:
      GITHUB_CONTEXT: ${{ toJson(github) }}

  # dependency and source info
  #############################################################################
  dependency_info:
    name: Dependency info
    runs-on: ubuntu-latest
    outputs:
      fork_coatjava: ${{ steps.info.outputs.fork_coatjava }}
      branch_coatjava: ${{ steps.info.outputs.branch_coatjava }}
      fork_clas12tags: ${{ steps.info.outputs.fork_clas12tags }}
      branch_clas12tags: ${{ steps.info.outputs.branch_clas12tags }}
      fork_clas12config: ${{ steps.info.outputs.fork_clas12config }}
      branch_clas12config: ${{ steps.info.outputs.branch_clas12config }}
      fork_clas12validation: ${{ steps.info.outputs.fork_clas12validation }}
      branch_clas12validation: ${{ steps.info.outputs.branch_clas12validation }}
    steps:
      - name: get dependency info
        id: info
        run: |
          echo '${{ env.git_upstream }}' > upstream.json
          echo '${{ inputs.git_upstream || env.git_upstream }}' > caller_overrides.json
          echo '{ "${{ github.event.repository.name }}": { "fork": "${{ github.event.pull_request.head.repo.full_name || github.repository }}", "branch": "${{ github.head_ref || github.ref_name }}" }}' > source.json
          jq -sc add upstream.json caller_overrides.json source.json > deps.json
          echo fork_coatjava=$(jq -r '."coatjava".fork' deps.json) >> $GITHUB_OUTPUT
          echo branch_coatjava=$(jq -r '."coatjava".branch' deps.json) >> $GITHUB_OUTPUT
          echo fork_clas12tags=$(jq -r '."clas12Tags".fork' deps.json) >> $GITHUB_OUTPUT
          echo branch_clas12tags=$(jq -r '."clas12Tags".branch' deps.json) >> $GITHUB_OUTPUT
          echo fork_clas12config=$(jq -r '."clas12-config".fork' deps.json) >> $GITHUB_OUTPUT
          echo branch_clas12config=$(jq -r '."clas12-config".branch' deps.json) >> $GITHUB_OUTPUT
          echo fork_clas12validation=$(jq -r '."clas12-validation".fork' deps.json) >> $GITHUB_OUTPUT
          echo branch_clas12validation=$(jq -r '."clas12-validation".branch' deps.json) >> $GITHUB_OUTPUT
      - name: dispatch summary
        run: |
          echo '| | | |' >> $GITHUB_STEP_SUMMARY
          echo '| --- | --- | --- |' >> $GITHUB_STEP_SUMMARY
          echo '| **Pull Request** | <${{ github.event.pull_request.html_url || github.event.head_commit.url }}> | ${{ github.event.pull_request.title || github.event.head_commit.message }} |' >> $GITHUB_STEP_SUMMARY
          echo '| **`coatjava` Fork and Branch** | `${{ steps.info.outputs.fork_coatjava }}` | [`${{ steps.info.outputs.branch_coatjava }}`](https://github.com/${{ steps.info.outputs.fork_coatjava }}/tree/${{ steps.info.outputs.branch_coatjava }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| **`clas12Tags` Fork and Branch** | `${{ steps.info.outputs.fork_clas12tags }}` | [`${{ steps.info.outputs.branch_clas12tags }}`](https://github.com/${{ steps.info.outputs.fork_clas12tags }}/tree/${{ steps.info.outputs.branch_clas12tags }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| **`clas12-config` Fork and Branch** | `${{ steps.info.outputs.fork_clas12config }}` | [`${{ steps.info.outputs.branch_clas12config }}`](https://github.com/${{ steps.info.outputs.fork_clas12config }}/tree/${{ steps.info.outputs.branch_clas12config }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| **`clas12-validation` Fork and Branch** | `${{ steps.info.outputs.fork_clas12validation }}` | [`${{ steps.info.outputs.branch_clas12validation }}`](https://github.com/${{ steps.info.outputs.fork_clas12validation }}/tree/${{ steps.info.outputs.branch_clas12validation }}) |' >> $GITHUB_STEP_SUMMARY
          echo '| | | |' >> $GITHUB_STEP_SUMMARY

  # build
  #############################################################################

  build_coatjava:
    name: Build coatjava
    needs:
      - dependency_info
    runs-on: ubuntu-latest
    steps:
      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
      - name: checkout coatjava
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.dependency_info.outputs.fork_coatjava }}
          ref: ${{ needs.dependency_info.outputs.branch_coatjava }}
          path: coatjava
      - name: build
        working-directory: coatjava
        run: ./build-coatjava.sh
      - name: tree
        run: tree
      - name: tar
        run: tar czvf coatjava{.tar.gz,}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: ./*.tar.gz

  build_gemc:
    name: Build GEMC
    needs:
      - dependency_info
    runs-on: ubuntu-latest
    container: jeffersonlab/gemc:4.4.2-5.1-5.2-5.3-fedora36-cvmfs ##### FIXME: need `latest` tag
    steps:
      - name: checkout clas12Tags
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.dependency_info.outputs.fork_clas12tags }}
          ref: ${{ needs.dependency_info.outputs.branch_clas12tags }}
          path: clas12Tags
      - name: build
        working-directory: clas12Tags/source
        run: |
          source /app/localSetup.sh
          scons -j2 OPT=1
      - name: version info
        working-directory: clas12Tags/source
        run: |
          source /app/localSetup.sh
          module switch gemc/5.3 # for dependency files ##### FIXME: switch to gemc/dev and use ubuntu + cvmfs action
          echo "### GEMC Build Information:"
          ./gemc -USE_GUI=0
      - name: tar
        run: tar czvf clas12Tags{.tar.gz,}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: ./*.tar.gz

  # clas12-config configuration
  #############################################################################

  config_files:
    name: Configuration files
    needs:
      - dependency_info
    runs-on: ubuntu-latest
    outputs:
      num_events: ${{ steps.num_events.outputs.num_events }}
      tag_config_coatjava: ${{ steps.version.outputs.tag_config_coatjava }}
      tag_config_gemc: ${{ steps.version.outputs.tag_config_gemc }}
      matrix_evgen: ${{ steps.read_matrices.outputs.matrix_evgen }}
      matrix_config: ${{ steps.read_matrices.outputs.matrix_config }}
      matrix_full: ${{ steps.matrix_full.outputs.matrix_full }}
    steps:
      - name: checkout clas12-validation
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.dependency_info.outputs.fork_clas12validation }}
          ref: ${{ needs.dependency_info.outputs.branch_clas12validation }}
      - name: checkout clas12-config
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.dependency_info.outputs.fork_clas12config }}
          ref: ${{ needs.dependency_info.outputs.branch_clas12config }}
          path: clas12-config
      - name: set number of events
        id: num_events
        run: |
          num_events=${{ inputs.num_events || 0 }} # use custom number of events
          if [ $num_events -eq 0 ] ; then
            # use low stats by default, or high stats for nightly scheduled jobs
            [ "${{ github.event_name }}" = "schedule" ] && num_events=${{ env.num_events_full }} || num_events=${{ env.num_events_fast }}
          fi
          echo num_events=$num_events >> $GITHUB_OUTPUT
          echo "### Number of Events:" >> $GITHUB_STEP_SUMMARY
          echo "$num_events" >> $GITHUB_STEP_SUMMARY
      - name: test clas12-config utils
        working-directory: clas12-config
        run: |
          util/latest.rb coatjava
          util/latest.rb gemc
      - name: get version info
        id: version
        working-directory: clas12-config
        run: |
          tag_config_coatjava=$(echo '${{ inputs.config_file_versions || env.config_file_versions }}' | jq -r '.coatjava')
          tag_config_gemc=$(echo '${{ inputs.config_file_versions || env.config_file_versions }}' | jq -r '.gemc')
          # get the 'latest' version number, if we asked for 'latest'
          [ "$tag_config_coatjava" = "latest" ] &&  tag_config_coatjava=$(util/latest.rb coatjava)
          [ "$tag_config_gemc" = "latest" ] && tag_config_gemc=$(util/latest.rb gemc)
          # job summary
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Versions:" >> $GITHUB_STEP_SUMMARY
          echo "| Configuration File Set | Version |"      >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |"                             >> $GITHUB_STEP_SUMMARY
          echo "| \`coatjava\` | ${tag_config_coatjava} |" >> $GITHUB_STEP_SUMMARY
          echo "| \`gemc\` | ${tag_config_gemc} |"         >> $GITHUB_STEP_SUMMARY
          # output vars
          echo tag_config_coatjava=$tag_config_coatjava >> $GITHUB_OUTPUT
          echo tag_config_gemc=$tag_config_gemc         >> $GITHUB_OUTPUT
      - name: read matrices
        id: read_matrices
        run: |
          echo matrix_evgen=$(jq -c . <(echo '{ "evgen": ${{ inputs.matrix_evgen || env.matrix_evgen }} }')) >> $GITHUB_OUTPUT
          echo matrix_config=$(jq -c . <(echo '{ "config": ${{ inputs.matrix_config || env.matrix_config }} }')) >> $GITHUB_OUTPUT
      - name: make full job matrix
        id: matrix_full
        run: echo matrix_full=$(jq -sc add <(echo '${{ steps.read_matrices.outputs.matrix_evgen }}') <(echo '${{ steps.read_matrices.outputs.matrix_config }}')) >> $GITHUB_OUTPUT
      - name: summary
        run: |
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configuration Job Matrix:" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo '${{ steps.matrix_full.outputs.matrix_full }}' | jq | xargs -0 -I{} echo {} >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY
      - name: tar
        run: tar czvf clas12-config{.tar.gz,}
      - uses: actions/upload-artifact@v3
        with:
          name: build
          retention-days: 1
          path: ./*.tar.gz

  # event generation
  #############################################################################
  event_generation:
    name: Event generation
    needs:
      - build_coatjava
      - config_files
      - dependency_info
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.config_files.outputs.matrix_evgen) }}
    steps:
      - name: checkout clas12-validation
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.dependency_info.outputs.fork_clas12validation }}
          ref: ${{ needs.dependency_info.outputs.branch_clas12validation }}
      - name: setup java
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: zulu
      - name: setup groovy
        uses: wtfjoke/setup-groovy@v1
        with:
          groovy-version: 4.x
      - uses: actions/download-artifact@v3
        with:
          name: build
      - name: untar build
        run: ls *.tar.gz | xargs -I{} tar xzvf {}
      - name: check if this configuration is known
        run: jq -re '.${{ matrix.evgen }}' <(echo '${{ env.evgen_opts }}')
      - name: event generation
        run: |
          coatjava/coatjava/bin/run-groovy \
            coatjava/validation/advanced-tests/src/eb/scripts/gen.groovy \
            $(jq -r '.${{ matrix.evgen }}' <(echo '${{ env.evgen_opts }}')) \
            -n ${{ needs.config_files.outputs.num_events }}
      - name: rename artifact
        run: |
          ls -t *.txt
          mv -v $(ls -t *.txt | head -n1) evgen.${{ matrix.evgen }}.dat
      - uses: actions/upload-artifact@v3
        with:
          name: evgen
          retention-days: 1
          path: evgen.${{ matrix.evgen }}.dat

  # simulation, reconstruction, and analysis: combined to one step to avoid large artifact I/O overhead
  #############################################################################
  fulltest:
    name: Run
    needs:
      - event_generation
      - build_gemc
      - config_files
      - dependency_info
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix: ${{ fromJson(needs.config_files.outputs.matrix_full) }}
    steps:
      - name: checkout clas12-validation
        uses: actions/checkout@v4
        with:
          repository: ${{ needs.dependency_info.outputs.fork_clas12validation }}
          ref: ${{ needs.dependency_info.outputs.branch_clas12validation }}
      - name: setup groovy
        uses: wtfjoke/setup-groovy@v1
        with:
          groovy-version: 4.x
      - uses: actions/download-artifact@v3
        with:
          name: evgen
      - uses: actions/download-artifact@v3
        with:
          name: build
      - name: tree
        run: ls -lhR
      - name: untar build
        run: ls *.tar.gz | xargs -I{} tar xzvf {}
      - name: file names
        id: files
        run: |
          echo evgenFile=evgen.${{ matrix.evgen }}.dat >> $GITHUB_OUTPUT
          echo simFile=sim.${{ matrix.evgen }}.${{ matrix.config }}.hipo >> $GITHUB_OUTPUT
          echo recFile=rec.${{ matrix.evgen }}.${{ matrix.config }}.hipo >> $GITHUB_OUTPUT
          echo anaFile=ana.${{ matrix.evgen }}.${{ matrix.config }}.txt  >> $GITHUB_OUTPUT
          echo gemcConfigFile=clas12-config/gemc/${{ needs.config_files.outputs.tag_config_gemc }}/${{ matrix.config }}.gcard >> $GITHUB_OUTPUT
          echo coatjavaConfigFile=clas12-config/coatjava/${{ needs.config_files.outputs.tag_config_coatjava }}/${{ matrix.config }}.yaml >> $GITHUB_OUTPUT
      - name: config files exist
        run: |
          ls ${{ steps.files.outputs.gemcConfigFile }}
          ls ${{ steps.files.outputs.coatjavaConfigFile }}
      - name: simulation
        uses: docker://jeffersonlab/gemc:4.4.2-5.1-5.2-5.3-fedora36-cvmfs ##### FIXME: need `latest` tag
        with:
          entrypoint: bin/ci_sim.sh ##### FIXME (in the script): switch to gemc/dev and use ubuntu + cvmfs action
          args: ${{ steps.files.outputs.gemcConfigFile }} ${{ steps.files.outputs.evgenFile }} ${{ steps.files.outputs.simFile }}
      - name: check if output exists
        run: ls ${{ steps.files.outputs.simFile }}
      - name: reconstruction
        run: |
          coatjava/coatjava/bin/recon-util \
            -y ${{ steps.files.outputs.coatjavaConfigFile }} \
            -i ${{ steps.files.outputs.simFile }} \
            -o ${{ steps.files.outputs.recFile }}
      - name: check if output exists
        run: ls ${{ steps.files.outputs.recFile }}
      - name: analysis
        run: |
          bankName="REC::Particle"
          [[ "${{ matrix.evgen }}" =~ FT ]] && bankName="RECFT::Particle"
          echo "bankName = $bankName"
          coatjava/coatjava/bin/run-groovy bin/multiplicity.groovy ${{ steps.files.outputs.recFile }} ${{ steps.files.outputs.anaFile }} $bankName
      - uses: actions/upload-artifact@v3
        with:
          name: sim
          retention-days: 3
          path: sim.${{ matrix.evgen }}.${{ matrix.config }}.hipo
      - uses: actions/upload-artifact@v3
        with:
          name: rec
          retention-days: 3
          path: rec.${{ matrix.evgen }}.${{ matrix.config }}.hipo
      - uses: actions/upload-artifact@v3
        with:
          name: ana
          retention-days: 3
          path: ana.${{ matrix.evgen }}.${{ matrix.config }}.txt

  # finalize
  #############################################################################
  final:
    name: Final
    needs:
      - fulltest
      - config_files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: ana
      - name: read multiplicity
        run: |
          echo "# Multiplicity Report" >> $GITHUB_STEP_SUMMARY
          echo '```yaml' >> $GITHUB_STEP_SUMMARY
          for evgen in $(echo '${{ needs.config_files.outputs.matrix_full }}' | jq -r '.evgen[]') ; do
            echo "evgen: $evgen" >> $GITHUB_STEP_SUMMARY
            first=true
            for config in $(echo '${{ needs.config_files.outputs.matrix_full }}' | jq -r '.config[]') ; do
              if $first ; then
                grep -E '^bank: ' ana.${evgen}.${config}.txt >> $GITHUB_STEP_SUMMARY
                echo "multiplicity: |" >> $GITHUB_STEP_SUMMARY
                printf "  %25s:  PID (multiplicity) ...    # sorted multiplicity for each PID\n" "config" >> $GITHUB_STEP_SUMMARY
                first=false
              fi
              printf "  %25s:  %s" $config "$(tail -n1 ana.${evgen}.${config}.txt)" | xargs -0 -I{} echo {} >> $GITHUB_STEP_SUMMARY
            done
            echo "" >> $GITHUB_STEP_SUMMARY
          done
          echo '```' >> $GITHUB_STEP_SUMMARY
